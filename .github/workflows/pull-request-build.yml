# This workflow builds pull-requests but does not merge them
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Pull-Request Build

on:
    issue_comment:
        types: [created]

jobs:
  build-pull-request:
    name: Run tests
    # if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/test') }}
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/test' }}

    runs-on: ubuntu-latest

    steps:
        #- name: github.event.issue.pull_request
        #  env:
        #      PR: ${{ toJSON(github.event.issue.pull_request) }}
        #  run: echo "-- $PR --"
        #- name: github.event.comment.body
        #  env:
        #      COMMENT: ${{ toJSON(github.event.comment.body) }}
        #  run: echo "-- $COMMENT --"
        #- name: GITHUB_EVENT_PATH
        #  run: cat $GITHUB_EVENT_PATH
        #- name: curl pull request url 
        #  run: curl -s -X GET ${{ github.event.issue.pull_request.url }}
        - name: Get PR context
          id: pr-context
          uses: actions/github-script@v4.1.0
          with:
              result-encoding: json
              script: |
                  const response = await github.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.payload.issue.number
                  });
                  console.log(response)
                  return response
        #- name: Examine pr-context
        #  env:
        #      PR1: ${{ toJSON(steps.pr-context.outputs) }}
        #      PR2: ${{ toJSON(steps.pr-context.outputs.result) }}
        #      PR3: ${{ fromJSON(steps.pr-context.outputs.result).status }}
        #      PR4: ${{ fromJSON(steps.pr-context.outputs.result).data.base.ref }}
        #      PR5: ${{ toJSON(fromJSON(steps.pr-context.outputs.result).data) }}
        #  run: |
        #      echo "PR3: $PR3"
        #      echo "PR4: $PR4"
        - name: Checkout the main branch
          uses: actions/checkout@v2
          with:
              fetch-depth: 0
        - name: Fetch the pull-request
          run: git fetch origin +refs/pull/${{ github.event.issue.number }}/head:refs/remotes/origin/pr/${{ github.event.issue.number }}
        - name: Switch to the PR branch
          run: git switch pr/${{ github.event.issue.number }}
        - name: Fetch the destination branch
          run: git fetch origin ${{ fromJSON(steps.pr-context.outputs.result).data.base.ref }}
        - name: Switch to destination branch
          run: git switch ${{ fromJSON(steps.pr-context.outputs.result).data.base.ref }}
        - name: Git log
          run: |
              git log --format=format:"%C(auto)%h %C(cyan)%ar%C(auto) %d %C(green)%aN%Creset %s" --graph --all
        - name: Merge PR into destination branch
          run: |
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git merge --no-ff -m "Merge PR ${{ github.event.issue.number }} to ${{ fromJSON(steps.pr-context.outputs.result).data.base.ref }}" pr/${{ github.event.issue.number }}
        - name: Show summary
          run: git show --summary

        - name: Set up JDK 11
          uses: actions/setup-java@v2
          with:
            java-version: '11'
            distribution: 'adopt'
        - name: Grant execute permission for gradlew
          run: chmod +x gradlew
        - name: Build with Gradle
          run: ./gradlew test
        - name: Publish Test Report
          uses: mikepenz/action-junit-report@v2
          if: always() # always run even if the previous step fails
          with:
              report_paths: '**/build/test-results/test/TEST-*.xml'

        - name: Update status
          run: |
              curl -X POST \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --header 'Accept: application/vnd.github.v3+json' \
              --data '{"state": "{{ job.status }}"}' \
              --url 'https://api.github.com/repos/${{ github.repository }}/statuses/${{ fromJSON(steps.pr-context.outputs.result).data.head.sha }}' \
              --fail

